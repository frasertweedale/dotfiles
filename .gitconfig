[user]
	name = Fraser Tweedale
	email = frase@frase.id.au
[push]
	default = upstream
[alias]
	co = checkout
	ci = commit
	st = status
	rank = shortlog -esn --no-merges
	fa = fetch --all
	graph = log --graph --oneline
	g = !git graph
	ga = !git graph --all
	diffi = diff --cached
	ff = merge --ff-only
	sub = submodule
	stat = diff --stat
	stati = diff --cached --stat
	tmerge = merge --no-ff
	pushup = "!f() { \n\
			REMOTE=$(git remote |grep github) || REMOTE=origin \n\
			BRANCH=$(git symbolic-ref --short HEAD) \n\
			git push --set-upstream \"$REMOTE\" $BRANCH:refs/heads/$BRANCH \n\
		}; f"
	ri = "!f() { \n\
			BASE=\"$1\" \n\
			git rev-parse --verify --quiet \"$1\" || BASE=\"HEAD~$1\" \n\
			shift \n\
			git rebase --interactive \"$BASE\" \"$@\" \n\
		}; f"
	gerrit = "!f() { \n\
			ACTION=$1 \n\
			BRANCH=$2 \n\
			shift 2 \n\
			RECEIVEPACK=\"\" \n\
			for REVIEWER in \"$@\"; do RECEIVEPACK=\"$RECEIVEPACK --reviewer '$REVIEWER'\"; done \n\
			if [ -n \"$RECEIVEPACK\" ] \n\
			then \n\
				git push \"--receive-pack=git receive-pack $RECEIVEPACK\" gerrit HEAD:refs/$ACTION/$BRANCH \n\
			else \n\
				git push gerrit HEAD:refs/$ACTION/$BRANCH \n\
			fi \n\
		}; f"
	draft = "!g() { git gerrit drafts \"$@\"; }; g"
	publish = "!g() { git gerrit publish \"$@\"; }; g"
	foreach = "!f() { \n\
			BRANCH=$(git symbolic-ref --short HEAD) \n\
			REVS=$1 \n\
			shift \n\
			for REV in $(git rev-list --reverse \"$REVS\") \n\
			do \n\
				git checkout \"$REV\" \n\
				sh -c \"$*\" \n\
			done \n\
			git checkout \"$BRANCH\" \n\
		}; f"
	fp = "!f() { \n\
			PROJECT=$(basename $(git rev-parse --show-toplevel)) \n\
			BASE=\"$1\" \n\
			git rev-parse --verify --quiet \"$1\" || BASE=\"HEAD~$1\" \n\
			START_NUMBER=$2 \n\
			for PATCH in $(git format-patch -M -C --patience --full-index --start-number \"$START_NUMBER\" \"$BASE..\") \n\
			do \n\
				SEQ=$(echo $PATCH | cut -d \"-\" -f 1) \n\
				SUMMARY=$(echo $PATCH | cut -d \"-\" -f 2-) \n\
				[ -z \"$3\" ] && VERSION=\"\" || VERSION=\"-$3\" \n\
				mv $PATCH $PROJECT-$LOGNAME-$SEQ$VERSION-$SUMMARY \n\
			done \n\
		}; f"
	frankenstash = "!f() { \n\
			touch $(git rev-parse --git-dir)/logs/refs/stash \n\
			git update-ref refs/stash $1 \n\
		}; f"
	review-pr = "!f() { \n\
		# if remote argument ($2) given, use it \n\
		# otherwise use 'origin' if it exists \n\
		# otherwise use 'github' \n\
		[ -n \"$2\" ] && REMOTE=$2 || REMOTE=$(git remote |grep origin) || REMOTE=github \n\
		git fetch $REMOTE pull/$1/head \n\
		git checkout -B pull/$1 FETCH_HEAD \n\
	}; f"
	orphan-branch = "!f() { \n\
		export GIT_INDEX_FILE=$(git rev-parse --git-dir)/index-tmp \n\
		REF=refs/heads/$1 \n\
		git read-tree --empty \n\
		TREE=$(git write-tree) \n\
		COMMIT=$(git commit-tree \"$TREE\" -m \"new empty orphan branch\") \n\
		git update-ref \"$REF\" \"$COMMIT\" \n\
	}; f"
	snapshot = "!f() { \n\
		# decide index file before overriding work tree \n\
		export GIT_INDEX_FILE=$(git rev-parse --absolute-git-dir)/index-tmp \n\
		export GIT_WORK_TREE=$1 \n\
		REF=refs/heads/$2 \n\
		git read-tree \"$REF\" \n\
		git add --all --intent-to-add \n\
		git diff --quiet && exit \n\
		git add --all \n\
		TREE=$(git write-tree) \n\
		COMMIT=$(git commit-tree \"$TREE\" -p \"$REF\" -m \"snapshot $(date '+%y-%m-%d %H:%M')\") \n\
		git update-ref \"$REF\" \"$COMMIT\" \n\
	}; f"

[color]
	diff = auto
[log]
	decorate = short
[rerere]
	enabled = true
[rebase]
	autostash = true
	autosquash = true
[diff]
	algorithm = patience
